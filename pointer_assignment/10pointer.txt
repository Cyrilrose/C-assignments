10. What is dynamic memory allocation (DMA)? How can you use it in C?
The process of allocating and freeing memory at run time is known as dynamic memory allocation. This reserves the memory required by the program and returns valuable resources to the system once the use of reserved space is utilized. There are four library routines known as “memory management function” that can be used for allocating and freeing memory during program execution. These functions help us build complex application programs that use the available memory intelligently. These four library functions comes under <stdlib.h> header file in C. They are as follows:
1.	malloc( ): It helps to allocate a block of memory 
2.	calloc( ): It helps in allocating multiple of block of memory. 
3.	free( ): It is used in releasing the space used.
4.	realloc( ): It helps in altering the size of a block.
Regarding the use of the DMA in C it makes the program more convenient. 
Malloc helps us to allocate the size of memory that is required for user so that is helps in minimization of wastage of unused memory and saves the memory of the computer i.e. only used memory can be taken by the computer.
Syntax: 
	ptr=(data_type*) malloc(size_of_block);
Calloc is another memory allocation function that is normally used for requesting memory space at run time for storing derived data types such as arrays and structures. While malloc allocates single block of storage, calloc allocates multiple blocks of storage, each of the same size, and then sets all bytes to zero.
Syntax:
	ptr=(data_type*)calloc(no_of_blocks,size_of_each_block);
Free is another memory allocation function that helps to release the unused space of the program. When we no longer need the data we  stored in a block of memory, and we do not intend to use that block for storing any other information, we may release the block of memory  for future use, using the free function
	Syntax:
		free(ptr);
Realloc is also another memory allocation function which is used to modify the size of previously allocated space. Sometime while coding the problem may arise that the space we allocate at before may not be sufficient and we may require more space in this case we use realloc for reallocating the size of a block for addition of more information.
	Syntax:
	ptr= realloc(ptr,newsize);
This was just little description the library function for the memory allocation in C it can be clearer by the help of following example:
a.	Malloc: 
#include <stdio.h>
#include <stdlib.h>
int main(){
    int n,i,*ptr,sum=0;
    printf("Enter number of elements: ");
    scanf("%d",&n);
    ptr=(int*)malloc(n*sizeof(int));  //memory allocated using malloc
    if(ptr==NULL)                     
    {
        printf("Error! memory not allocated.");
        exit(0);
    }
    printf("Enter elements of array: ");
    for(i=0;i<n;++i)
    {
        scanf("%d",ptr+i); 
        sum+=*(ptr+i);
    }
    printf("Sum=%d",sum);
    free(ptr);							Output: 10a
    return 0;
}

b.	Calloc:
#include <stdio.h>
#include <stdlib.h>
int main(){
    int n,i,*ptr,sum=0;
    printf("Enter number of elements: ");
    scanf("%d",&n);
    ptr=(int*)calloc(n,sizeof(int));
    if(ptr==NULL)
    {
        printf("Error! memory not allocated.");	
        exit(0);
    }
    printf("Enter elements of array: ");				    Output: 10b
    for(i=0;i<n;++i)
    {        scanf("%d",ptr+i);
        sum+=*(ptr+i);
    }
    printf("Sum=%d",sum);					
    free(ptr);
    return 0;
}	

c.	Realloc:
#include <stdio.h>
#include <stdlib.h>
int main(){
    int *ptr,i,n1,n2;
    printf("Enter size of array: ");				   Output: 10c
    scanf("%d",&n1); 
    ptr=(int*)malloc(n1*sizeof(int));
    printf("Address of previously allocated memory: ");
    for(i=0;i<n1;++i)
    printf("%u\t",ptr+i);
     printf("\nEnter new size      of array: ");
    scanf("%d",&n2);
    ptr=realloc(ptr,n2);
    for(i=0;i<n2;++i)
         printf("%u\t",ptr+i);				
    return 0;
}	
